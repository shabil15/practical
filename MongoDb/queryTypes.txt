MongoDB queries can be broadly categorized based on their functionality. Below is an organized breakdown of MongoDB query types, with explanations and examples for each category.

---

## 1. **CRUD Operations**
CRUD refers to **Create, Read, Update, and Delete** operations, which are the core functions of any database.

### **1.1 Create (Insert)**
- Used to insert data into a collection.
- Methods: `insertOne()`, `insertMany()`

**Examples:**
```javascript
db.users.insertOne({ name: "John", email: "john@example.com" });
db.users.insertMany([
  { name: "Alice", email: "alice@example.com" },
  { name: "Bob", email: "bob@example.com" }
]);
```

---

### **1.2 Read (Find)**
- Retrieve documents from a collection.
- Methods: `find()`, `findOne()`

**Examples:**
```javascript
db.users.find({ role: "admin" }); // Find all admins
db.users.findOne({ email: "john@example.com" }); // Find a single user
```

---

### **1.3 w
- Modify existing documents.
- Methods: `updateOne()`, `updateMany()`, `findOneAndUpdate()`

**Examples:**
```javascript
db.users.updateOne({ name: "John" }, { $set: { role: "admin" } });
db.users.updateMany({ role: "customer" }, { $set: { isActive: true } });
```

---

### **1.4 Delete**
- Remove documents from a collection.
- Methods: `deleteOne()`, `deleteMany()`, `findOneAndDelete()`

**Examples:**
```javascript
db.users.deleteOne({ name: "John" }); // Delete a single document
db.users.deleteMany({ role: "customer" }); // Delete multiple documents
```

---

## 2. **Aggregation**
Aggregation operations process data records and return computed results. They are used for complex queries like filtering, grouping, and transformations.

- Method: `aggregate()`

**Examples:**
```javascript
db.orders.aggregate([
  { $match: { status: "Completed" } }, // Filter
  { $group: { _id: "$userId", totalSpent: { $sum: "$totalPrice" } } }, // Group and sum
  { $sort: { totalSpent: -1 } } // Sort by totalSpent descending
]);
```

---

## 3. **Query Operators**
MongoDB provides operators to filter, update, or perform calculations.

### **3.1 Comparison Operators**
Used to compare field values.
- `$eq` (equal), `$ne` (not equal), `$gt` (greater than), `$lt` (less than), `$gte`, `$lte`, etc.

**Example:**
```javascript
db.users.find({ age: { $gt: 18 } }); // Find users older than 18
```

---

### **3.2 Logical Operators**
Combine multiple conditions.
- `$and`, `$or`, `$not`, `$nor`

**Example:**
```javascript
db.users.find({ $or: [{ role: "admin" }, { isActive: true }] });
```

---

### **3.3 Array Operators**
Used to query array fields.
- `$in`, `$nin`, `$all`, `$size`, `$elemMatch`

**Example:**
```javascript
db.users.find({ roles: { $in: ["admin", "customer"] } }); // Check for roles in array
```

---

### **3.4 Update Operators**
Used for modifying documents.
- `$set`, `$unset`, `$inc`, `$push`, `$pop`, `$pull`, etc.

**Examples:**
```javascript
db.users.updateOne({ name: "John" }, { $set: { isActive: true } }); // Add a field
db.users.updateOne({ name: "John" }, { $inc: { loginCount: 1 } }); // Increment login count
```

---

### **3.5 Element Operators**
Query documents based on field existence.
- `$exists`, `$type`

**Examples:**
```javascript
db.users.find({ phone: { $exists: true } }); // Find users with a phone field
db.users.find({ age: { $type: "number" } }); // Find users where age is a number
```

---

## 4. **Indexing**
Indexes improve query performance by allowing MongoDB to search faster.

### **4.1 Create Index**
- Method: `createIndex()`

**Example:**
```javascript
db.users.createIndex({ email: 1 }); // Create an ascending index on the email field
```

### **4.2 View Indexes**
- Method: `getIndexes()`

**Example:**
```javascript
db.users.getIndexes();
```

---

## 5. **Text Search**
MongoDB supports full-text search for string fields.

### **5.1 Create a Text Index**
```javascript
db.products.createIndex({ description: "text" });
```

### **5.2 Perform a Text Search**
```javascript
db.products.find({ $text: { $search: "laptop" } });
```

---

## 6. **Geospatial Queries**
Used to work with geospatial data (e.g., finding locations near a point).

### **6.1 Insert Geospatial Data**
```javascript
db.places.insertOne({ name: "Park", location: { type: "Point", coordinates: [40.7128, -74.0060] } });
```

### **6.2 Find Nearby Locations**
```javascript
db.places.find({
  location: {
    $near: {
      $geometry: { type: "Point", coordinates: [40.7128, -74.0060] },
      $maxDistance: 1000 // Meters
    }
  }
});
```

---

## 7. **Administrative Commands**
Commands to manage the database and collections.

### **7.1 List All Databases**
```javascript
show dbs;
```

### **7.2 Create or Switch Database**
```javascript
use myDatabase;
```

### **7.3 Drop a Collection**
```javascript
db.users.drop();
```

### **7.4 Drop a Database**
```javascript
db.dropDatabase();
```

---

## 8. **Bulk Write Operations**
Perform multiple operations in a single command.

**Example:**
```javascript
db.users.bulkWrite([
  { insertOne: { document: { name: "John", email: "john@example.com" } } },
  { updateOne: { filter: { name: "Alice" }, update: { $set: { isActive: false } } } },
  { deleteOne: { filter: { name: "Bob" } } }
]);
```

---

## 9. **Transactions**
Used to perform multiple operations atomically.

**Example:**
```javascript
const session = db.getMongo().startSession();
session.startTransaction();
try {
  session.getDatabase("myDatabase").users.updateOne({ name: "John" }, { $set: { isActive: false } });
  session.getDatabase("myDatabase").orders.insertOne({ userId: ObjectId("..."), totalPrice: 100 });
  session.commitTransaction();
} catch (error) {
  session.abortTransaction();
} finally {
  session.endSession();
}
```

---

Let me know if you'd like detailed examples or explanations for any specific category!